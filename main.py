import os
import asyncio
import yt_dlp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Replit
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üé• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="video_mode"),
                InlineKeyboardButton(text="üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", callback_data="audio_mode"),
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    return keyboard


# --- /start ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π.\n\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é YouTube, TikTok, Instagram, VK, Twitter, Facebook –∏ –¥—Ä.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üîó, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å üé• –∏–ª–∏ üéµ.",
        reply_markup=main_menu()
    )


# --- –ü–æ–º–æ—â—å ---
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data == "help":
        await callback.message.answer(
            "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç (üé• –∏–ª–∏ üéµ).\n"
            "–Ø —Å–∫–∞—á–∞—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @woxda"
        )
    elif callback.data == "video_mode":
        await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ üé•")
    elif callback.data == "audio_mode":
        await callback.message.answer("üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∞—É–¥–∏–æ üéµ")
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ ---
@dp.message()
async def handle_links(message: types.Message):
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data=f"download|video|{url}"),
                InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ", callback_data=f"download|audio|{url}")
            ]
        ]
    )
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å? üéØ", reply_markup=keyboard)


# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ---
@dp.callback_query()
async def process_download(callback: types.CallbackQuery):
    if not callback.data.startswith("download|"):
        return

    _, mode, url = callback.data.split("|", 2)
    await callback.message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    filename = "download"

    # –û–ø—Ü–∏–∏ yt-dlp
    if mode == "video":
        ydl_opts = {"outtmpl": f"{filename}.mp4", "format": "mp4"}
    else:  # audio
        ydl_opts = {
            "outtmpl": f"{filename}.mp3",
            "format": "bestaudio/best",
            "postprocessors": [
                {"key": "FFmpegExtractAudio", "preferredcodec": "mp3", "preferredquality": "192"}
            ]
        }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if mode == "video" and os.path.exists(f"{filename}.mp4"):
            await callback.message.answer_video(open(f"{filename}.mp4", "rb"))
            os.remove(f"{filename}.mp4")
        elif mode == "audio" and os.path.exists(f"{filename}.mp3"):
            await callback.message.answer_audio(open(f"{filename}.mp3", "rb"))
            os.remove(f"{filename}.mp3")
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

    await callback.answer()


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
